// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String          @id @default(cuid())

  // User details
  name          String?
  email         String          @unique
  emailVerified DateTime?

  // Images
  image         String?

  // Relationships
  accounts      Account[]
  sessions      Session[]
  userResearchPaper UserResearchPaper[]
 
 // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Event {
  id String @id @default(cuid())

  // Images
  banner String?
  poster String?

  // Event details
  name String
  description String?
  venue String?
  startDate DateTime
  endDate DateTime

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResearchPaper {
  id String   @id @default(cuid())


  // Research paper details
  title           String
  pictures      String[]
  doi            String   @unique
  link           String   @unique
  publishedAt    DateTime
  conference     String?
  track         String?
  description   String?

  // Relationships
  userResearchPaper UserResearchPaper[]


  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserResearchPaper {
  userId          String
  researchPaperId String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  researchPaper   ResearchPaper @relation(fields: [researchPaperId], references: [id], onDelete: Cascade)

  @@id([userId, researchPaperId])
}