// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

enum UserRole {
  VISITOR
  MEMBER
  ALUMINI
}

enum ContentType {
  BLOG
  RESEARCH_PAPER
  PROJECT
  EVENT
}

model User {
  id String @id @default(cuid())

  // User details
  name          String?
  email         String    @unique
  emailVerified DateTime?

  // Images
  image String?

  // Relationships
  accounts Account[]

  role                UserRole              @default(VISITOR)
  userContentRelation UserContentRelation[]
  researchPapers      ResearchPaper[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blogs     Blogs[]
}

model UserContentRelation {
  userId String
  User   User   @relation(fields: [userId], references: [id])

  contentId   String
  contentType ContentType

  @@id([userId, contentId])
}

model Event {
  id   String @id @default(cuid())
  slug String @unique

  // Images
  banner String
  poster String

  // Event details
  name        String
  description String
  venue       String   @default("ABES Engineering College, Ghaziabad")
  startDate   DateTime
  endDate     DateTime

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResearchPaper {
  id String @id @default(cuid())

  // Research paper details
  image       String
  title       String
  pictures    String[]
  authors     User[]
  doi         String   @unique
  publishedAt DateTime
  conference  String?
  track       String?
  description String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blogs {
  id   String @id @default(cuid())
  slug String @unique

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  categories String[]

  readTime Int // in minutes
  title    String
  tldr     String
  content  String
  tags     String[]
  views    Int      @default(0)

  poster String
  banner String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  relatedTo String?
  type      ContentType?
}

model ProjectProgress {
  id String @id @default(cuid())

  title       String
  description String
  blogLink    String
  images      String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Project {
  id String @id @default(cuid())

  title       String
  description String
  link        String   @unique
  repo        String   @unique
  techStack   String[]
  images      String[]

  progress ProjectProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
